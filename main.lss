
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000006a  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002d0  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000016f  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000395  00000000  00000000  00000789  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000125  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000dc  00000000  00000000  00000cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000da1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  78:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adc_Init>:
// ADC initialization
// ADC Clock frequency: 500,000 kHz
// ADC Voltage Reference: AREF pin
// ADC High Speed Mode: Off
// ADC Auto Trigger Source: None
ADMUX=ADC_VREF_TYPE & 0xff;
  80:	10 92 7c 00 	sts	0x007C, r1
ADCSRA=0x85;
  84:	85 e8       	ldi	r24, 0x85	; 133
  86:	80 93 7a 00 	sts	0x007A, r24
//SFIOR&=0xEF;
}
  8a:	08 95       	ret

0000008c <adc_Read>:

// Read the AD conversion result
uint16_t adc_Read(uint8_t adc_input){
ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
  8c:	80 93 7c 00 	sts	0x007C, r24
*/

void
delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  90:	84 e1       	ldi	r24, 0x14	; 20
  92:	8a 95       	dec	r24
  94:	a8 95       	wdr
  96:	e9 f7       	brne	.-6      	; 0x92 <adc_Read+0x6>
// Delay needed for the stabilization of the ADC input voltage
delay_us(10);
// Start the AD conversion
ADCSRA|=0x40;
  98:	80 91 7a 00 	lds	r24, 0x007A
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 93 7a 00 	sts	0x007A, r24
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
  a2:	80 91 7a 00 	lds	r24, 0x007A
  a6:	84 ff       	sbrs	r24, 4
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <adc_Read+0x16>
ADCSRA|=0x10;
  aa:	80 91 7a 00 	lds	r24, 0x007A
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	80 93 7a 00 	sts	0x007A, r24
return ADCW;
  b4:	20 91 78 00 	lds	r18, 0x0078
  b8:	30 91 79 00 	lds	r19, 0x0079
}
  bc:	c9 01       	movw	r24, r18
  be:	08 95       	ret

000000c0 <SetLeds_0>:
#include "add_lib.c"
#include "delays_lib.c"
#include "adc_M168_lib.c"

void SetLeds_0(uint8_t n){
if (n==0){
  c0:	88 23       	and	r24, r24
  c2:	11 f4       	brne	.+4      	; 0xc8 <SetLeds_0+0x8>
	sbi(PORTD,0); sbi(PORTD,1); sbi(PORTD,2);
  c4:	58 9a       	sbi	0x0b, 0	; 11
  c6:	03 c0       	rjmp	.+6      	; 0xce <SetLeds_0+0xe>
	return;
	};
if (n==1){
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	19 f4       	brne	.+6      	; 0xd2 <SetLeds_0+0x12>
	cbi(PORTD,0); sbi(PORTD,1); sbi(PORTD,2);
  cc:	58 98       	cbi	0x0b, 0	; 11
  ce:	59 9a       	sbi	0x0b, 1	; 11
  d0:	0c c0       	rjmp	.+24     	; 0xea <SetLeds_0+0x2a>
	return;
	};
if (n==2){
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	11 f4       	brne	.+4      	; 0xda <SetLeds_0+0x1a>
	sbi(PORTD,0); cbi(PORTD,1); sbi(PORTD,2);
  d6:	58 9a       	sbi	0x0b, 0	; 11
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <SetLeds_0+0x28>
	return;
	};
if (n==3){
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	11 f4       	brne	.+4      	; 0xe2 <SetLeds_0+0x22>
	sbi(PORTD,0); sbi(PORTD,1); cbi(PORTD,2);
  de:	58 9a       	sbi	0x0b, 0	; 11
  e0:	0e c0       	rjmp	.+28     	; 0xfe <SetLeds_0+0x3e>
	return;
	};
if (n==4){
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	21 f4       	brne	.+8      	; 0xee <SetLeds_0+0x2e>
	cbi(PORTD,0); cbi(PORTD,1); sbi(PORTD,2);
  e6:	58 98       	cbi	0x0b, 0	; 11
  e8:	59 98       	cbi	0x0b, 1	; 11
  ea:	5a 9a       	sbi	0x0b, 2	; 11
  ec:	08 95       	ret
	return;
	};	
if (n==5){
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	19 f4       	brne	.+6      	; 0xf8 <SetLeds_0+0x38>
	sbi(PORTD,0); cbi(PORTD,1); cbi(PORTD,2);
  f2:	58 9a       	sbi	0x0b, 0	; 11
  f4:	59 98       	cbi	0x0b, 1	; 11
  f6:	04 c0       	rjmp	.+8      	; 0x100 <SetLeds_0+0x40>
	return;
	};	
if (n==6){
  f8:	86 30       	cpi	r24, 0x06	; 6
  fa:	21 f4       	brne	.+8      	; 0x104 <SetLeds_0+0x44>
	cbi(PORTD,0); sbi(PORTD,1); cbi(PORTD,2);
  fc:	58 98       	cbi	0x0b, 0	; 11
  fe:	59 9a       	sbi	0x0b, 1	; 11
 100:	5a 98       	cbi	0x0b, 2	; 11
 102:	08 95       	ret
	return;
	};	
if (n==7){
 104:	87 30       	cpi	r24, 0x07	; 7
 106:	19 f4       	brne	.+6      	; 0x10e <SetLeds_0+0x4e>
	cbi(PORTD,0); cbi(PORTD,1); cbi(PORTD,2);
 108:	58 98       	cbi	0x0b, 0	; 11
 10a:	59 98       	cbi	0x0b, 1	; 11
 10c:	5a 98       	cbi	0x0b, 2	; 11
 10e:	08 95       	ret

00000110 <SetLeds_1>:
	return;
	};	
}

void SetLeds_1(uint8_t n){
if (n==0){
 110:	88 23       	and	r24, r24
 112:	11 f4       	brne	.+4      	; 0x118 <SetLeds_1+0x8>
	sbi(PORTC,0); sbi(PORTC,1); sbi(PORTC,2);
 114:	40 9a       	sbi	0x08, 0	; 8
 116:	03 c0       	rjmp	.+6      	; 0x11e <SetLeds_1+0xe>
	return;
	};
if (n==1){
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	19 f4       	brne	.+6      	; 0x122 <SetLeds_1+0x12>
	cbi(PORTC,0); sbi(PORTC,1); sbi(PORTC,2);
 11c:	40 98       	cbi	0x08, 0	; 8
 11e:	41 9a       	sbi	0x08, 1	; 8
 120:	0c c0       	rjmp	.+24     	; 0x13a <SetLeds_1+0x2a>
	return;
	};
if (n==2){
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	11 f4       	brne	.+4      	; 0x12a <SetLeds_1+0x1a>
	sbi(PORTC,0); cbi(PORTC,1); sbi(PORTC,2);
 126:	40 9a       	sbi	0x08, 0	; 8
 128:	07 c0       	rjmp	.+14     	; 0x138 <SetLeds_1+0x28>
	return;
	};
if (n==3){
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	11 f4       	brne	.+4      	; 0x132 <SetLeds_1+0x22>
	sbi(PORTC,0); sbi(PORTC,1); cbi(PORTC,2);
 12e:	40 9a       	sbi	0x08, 0	; 8
 130:	0e c0       	rjmp	.+28     	; 0x14e <SetLeds_1+0x3e>
	return;
	};
if (n==4){
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	21 f4       	brne	.+8      	; 0x13e <SetLeds_1+0x2e>
	cbi(PORTC,0); cbi(PORTC,1); sbi(PORTC,2);
 136:	40 98       	cbi	0x08, 0	; 8
 138:	41 98       	cbi	0x08, 1	; 8
 13a:	42 9a       	sbi	0x08, 2	; 8
 13c:	08 95       	ret
	return;
	};	
if (n==5){
 13e:	85 30       	cpi	r24, 0x05	; 5
 140:	19 f4       	brne	.+6      	; 0x148 <SetLeds_1+0x38>
	sbi(PORTC,0); cbi(PORTC,1); cbi(PORTC,2);
 142:	40 9a       	sbi	0x08, 0	; 8
 144:	41 98       	cbi	0x08, 1	; 8
 146:	04 c0       	rjmp	.+8      	; 0x150 <SetLeds_1+0x40>
	return;
	};	
if (n==6){
 148:	86 30       	cpi	r24, 0x06	; 6
 14a:	21 f4       	brne	.+8      	; 0x154 <SetLeds_1+0x44>
	cbi(PORTC,0); sbi(PORTC,1); cbi(PORTC,2);
 14c:	40 98       	cbi	0x08, 0	; 8
 14e:	41 9a       	sbi	0x08, 1	; 8
 150:	42 98       	cbi	0x08, 2	; 8
 152:	08 95       	ret
	return;
	};	
if (n==7){
 154:	87 30       	cpi	r24, 0x07	; 7
 156:	19 f4       	brne	.+6      	; 0x15e <SetLeds_1+0x4e>
	cbi(PORTC,0); cbi(PORTC,1); cbi(PORTC,2);
 158:	40 98       	cbi	0x08, 0	; 8
 15a:	41 98       	cbi	0x08, 1	; 8
 15c:	42 98       	cbi	0x08, 2	; 8
 15e:	08 95       	ret

00000160 <SetLeds_2>:
	return;
	};	
}

void SetLeds_2(uint8_t n){
if (n==0){
 160:	88 23       	and	r24, r24
 162:	11 f4       	brne	.+4      	; 0x168 <SetLeds_2+0x8>
	sbi(PORTC,3); sbi(PORTC,4); sbi(PORTC,5);
 164:	43 9a       	sbi	0x08, 3	; 8
 166:	03 c0       	rjmp	.+6      	; 0x16e <SetLeds_2+0xe>
	return;
	};
if (n==1){
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	19 f4       	brne	.+6      	; 0x172 <SetLeds_2+0x12>
	cbi(PORTC,3); sbi(PORTC,4); sbi(PORTC,5);
 16c:	43 98       	cbi	0x08, 3	; 8
 16e:	44 9a       	sbi	0x08, 4	; 8
 170:	0c c0       	rjmp	.+24     	; 0x18a <SetLeds_2+0x2a>
	return;
	};
if (n==2){
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	11 f4       	brne	.+4      	; 0x17a <SetLeds_2+0x1a>
	sbi(PORTC,3); cbi(PORTC,4); sbi(PORTC,5);
 176:	43 9a       	sbi	0x08, 3	; 8
 178:	07 c0       	rjmp	.+14     	; 0x188 <SetLeds_2+0x28>
	return;
	};
if (n==3){
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	11 f4       	brne	.+4      	; 0x182 <SetLeds_2+0x22>
	sbi(PORTC,3); sbi(PORTC,4); cbi(PORTC,5);
 17e:	43 9a       	sbi	0x08, 3	; 8
 180:	0e c0       	rjmp	.+28     	; 0x19e <SetLeds_2+0x3e>
	return;
	};
if (n==4){
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	21 f4       	brne	.+8      	; 0x18e <SetLeds_2+0x2e>
	cbi(PORTC,3); cbi(PORTC,4); sbi(PORTC,5);
 186:	43 98       	cbi	0x08, 3	; 8
 188:	44 98       	cbi	0x08, 4	; 8
 18a:	45 9a       	sbi	0x08, 5	; 8
 18c:	08 95       	ret
	return;
	};	
if (n==5){
 18e:	85 30       	cpi	r24, 0x05	; 5
 190:	19 f4       	brne	.+6      	; 0x198 <SetLeds_2+0x38>
	sbi(PORTC,3); cbi(PORTC,4); cbi(PORTC,5);
 192:	43 9a       	sbi	0x08, 3	; 8
 194:	44 98       	cbi	0x08, 4	; 8
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <SetLeds_2+0x40>
	return;
	};	
if (n==6){
 198:	86 30       	cpi	r24, 0x06	; 6
 19a:	21 f4       	brne	.+8      	; 0x1a4 <SetLeds_2+0x44>
	cbi(PORTC,3); sbi(PORTC,4); cbi(PORTC,5);
 19c:	43 98       	cbi	0x08, 3	; 8
 19e:	44 9a       	sbi	0x08, 4	; 8
 1a0:	45 98       	cbi	0x08, 5	; 8
 1a2:	08 95       	ret
	return;
	};	
if (n==7){
 1a4:	87 30       	cpi	r24, 0x07	; 7
 1a6:	19 f4       	brne	.+6      	; 0x1ae <SetLeds_2+0x4e>
	cbi(PORTC,3); cbi(PORTC,4); cbi(PORTC,5);
 1a8:	43 98       	cbi	0x08, 3	; 8
 1aa:	44 98       	cbi	0x08, 4	; 8
 1ac:	45 98       	cbi	0x08, 5	; 8
 1ae:	08 95       	ret

000001b0 <GetRND>:
	return;
	};	
}

uint8_t GetRND(void){
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	10 e0       	ldi	r17, 0x00	; 0
uint8_t i=0;
uint8_t n=0;

for (i=0;i<255;i++){
	if ((adc_Read(7)&0x1)>0) n++;
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	0e 94 46 00 	call	0x8c	; 0x8c <adc_Read>
 1be:	80 fd       	sbrc	r24, 0
 1c0:	0f 5f       	subi	r16, 0xFF	; 255

uint8_t GetRND(void){
uint8_t i=0;
uint8_t n=0;

for (i=0;i<255;i++){
 1c2:	1f 5f       	subi	r17, 0xFF	; 255
 1c4:	1f 3f       	cpi	r17, 0xFF	; 255
 1c6:	c1 f7       	brne	.-16     	; 0x1b8 <GetRND+0x8>
	if ((adc_Read(7)&0x1)>0) n++;
	};

return n%8;
}
 1c8:	80 2f       	mov	r24, r16
 1ca:	87 70       	andi	r24, 0x07	; 7
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <main>:



int main(void){
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
//WorkInit();
//ht0_init();
//i2c0_Init();
//ui16_EEPLoadAll();

sbi(PORTD,0); sbi(PORTD,1); sbi(PORTD,2);
 1dc:	58 9a       	sbi	0x0b, 0	; 11
 1de:	59 9a       	sbi	0x0b, 1	; 11
 1e0:	5a 9a       	sbi	0x0b, 2	; 11
sbi(PORTC,0); sbi(PORTC,1); sbi(PORTC,2);
 1e2:	40 9a       	sbi	0x08, 0	; 8
 1e4:	41 9a       	sbi	0x08, 1	; 8
 1e6:	42 9a       	sbi	0x08, 2	; 8
sbi(PORTC,3); sbi(PORTC,4); sbi(PORTC,5);
 1e8:	43 9a       	sbi	0x08, 3	; 8
 1ea:	44 9a       	sbi	0x08, 4	; 8
 1ec:	45 9a       	sbi	0x08, 5	; 8
sbi(DDRD,0); sbi(DDRD,1); sbi(DDRD,2);
 1ee:	50 9a       	sbi	0x0a, 0	; 10
 1f0:	51 9a       	sbi	0x0a, 1	; 10
 1f2:	52 9a       	sbi	0x0a, 2	; 10
sbi(DDRC,5); sbi(DDRC,4); sbi(DDRC,3);
 1f4:	3d 9a       	sbi	0x07, 5	; 7
 1f6:	3c 9a       	sbi	0x07, 4	; 7
 1f8:	3b 9a       	sbi	0x07, 3	; 7
sbi(DDRC,2); sbi(DDRC,1); sbi(DDRC,0);
 1fa:	3a 9a       	sbi	0x07, 2	; 7
 1fc:	39 9a       	sbi	0x07, 1	; 7
 1fe:	38 9a       	sbi	0x07, 0	; 7
// ADC initialization
// ADC Clock frequency: 500,000 kHz
// ADC Voltage Reference: AREF pin
// ADC High Speed Mode: Off
// ADC Auto Trigger Source: None
ADMUX=ADC_VREF_TYPE & 0xff;
 200:	10 92 7c 00 	sts	0x007C, r1
ADCSRA=0x85;
 204:	85 e8       	ldi	r24, 0x85	; 133
 206:	80 93 7a 00 	sts	0x007A, r24
 20a:	ff 24       	eor	r15, r15
 20c:	00 e0       	ldi	r16, 0x00	; 0
 20e:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 210:	c0 ea       	ldi	r28, 0xA0	; 160
 212:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t T0=0;
uint8_t T1=0;
uint8_t T2=0;

while (1){
if (T0==0){
 214:	ff 20       	and	r15, r15
 216:	41 f4       	brne	.+16     	; 0x228 <main+0x56>
	T0=GetRND()+1;
 218:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GetRND>
 21c:	f8 2e       	mov	r15, r24
 21e:	f3 94       	inc	r15
	SetLeds_0(GetRND());
 220:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GetRND>
 224:	0e 94 60 00 	call	0xc0	; 0xc0 <SetLeds_0>
	};

if (T1==0){
 228:	00 23       	and	r16, r16
 22a:	41 f4       	brne	.+16     	; 0x23c <main+0x6a>
	T1=GetRND()+1;
 22c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GetRND>
 230:	08 2f       	mov	r16, r24
 232:	0f 5f       	subi	r16, 0xFF	; 255
	SetLeds_1(GetRND());
 234:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GetRND>
 238:	0e 94 88 00 	call	0x110	; 0x110 <SetLeds_1>
	};
	
if (T2==0){
 23c:	11 23       	and	r17, r17
 23e:	41 f4       	brne	.+16     	; 0x250 <main+0x7e>
	T2=GetRND()+1;
 240:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GetRND>
 244:	18 2f       	mov	r17, r24
 246:	1f 5f       	subi	r17, 0xFF	; 255
	SetLeds_2(GetRND());
 248:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GetRND>
 24c:	0e 94 b0 00 	call	0x160	; 0x160 <SetLeds_2>
 250:	84 ef       	ldi	r24, 0xF4	; 244
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	fe 01       	movw	r30, r28
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	a8 95       	wdr
 25a:	e9 f7       	brne	.-6      	; 0x256 <main+0x84>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			delay_loop_2(((F_CPU) / 5e3) / 10);
			__ticks --;
 25c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25e:	d1 f7       	brne	.-12     	; 0x254 <main+0x82>
	};

delay_ms(50);

T0--; T1--; T2--;
 260:	fa 94       	dec	r15
 262:	01 50       	subi	r16, 0x01	; 1
 264:	11 50       	subi	r17, 0x01	; 1
 266:	d6 cf       	rjmp	.-84     	; 0x214 <main+0x42>

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
